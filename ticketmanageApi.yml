trigger:
- main

pool:
  name: 'Default'

variables:
  buildConfiguration: 'Release'

stages:
- stage: Build
  displayName: "Build & Publish"
  jobs:
  - job: BuildJob
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: "Restore"
      inputs:
        command: restore
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: "Build"
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: "Publish"
      inputs:
        command: publish
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish'
        zipAfterPublish: false

    - task: PublishPipelineArtifact@1
      displayName: "Publish Build Artifact"
      inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/publish'
          artifact: 'drop'

- stage: Deploy
  displayName: "Deploy to IIS"
  dependsOn: Build
  jobs:
  - job: DeployJob
    pool:
      name: Default   # ensure this is the agent on your VM
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: "Download Build Artifact"
      inputs:
        artifact: drop
        path: $(Pipeline.Workspace)/drop

    - powershell: |
        $source = "$(Pipeline.Workspace)\drop"
        $destination = "C:\inetpub\wwwroot\MyApp"

        Write-Host "Copying from $source to $destination ..."
        if (Test-Path $destination) {
            Copy-Item "$source\*" $destination -Recurse -Force
        } else {
            New-Item -ItemType Directory -Force -Path $destination
            Copy-Item "$source\*" $destination -Recurse -Force
        }
      displayName: "Deploy to IIS"
