# azure-pipelines.yml
trigger:
- main

pool:
  name: 'Default'  # your Hub VM agent pool

variables:
  buildConfiguration: 'Release'
  appVmIp: '10.0.1.5'       # App VM private IP
  appVmUser: $(DeployUser)  # App VM service/admin username
  appVmPassword: $(DeployPassword)  # Secure Pipeline variable

stages:

# ---------------------------
# Stage 1: Build & Publish
# ---------------------------
- stage: Build
  displayName: "Build & Publish"
  jobs:
  - job: BuildJob
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: "Restore"
      inputs:
        command: restore
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: "Build"
      inputs:
        command: build
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: "Publish"
      inputs:
        command: publish
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish'
        zipAfterPublish: false

    - publish: $(Build.ArtifactStagingDirectory)/publish
      artifact: drop

# ---------------------------
# Stage 2: Deploy
# ---------------------------
- stage: Deploy
  displayName: "Deploy to App VM"
  dependsOn: Build
  jobs:
  - job: DeployJob
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: "Download Build Artifact"
      inputs:
        artifact: drop
        path: $(Pipeline.Workspace)/drop

    - powershell: |
        # Convert password to secure string
        $secPassword = ConvertTo-SecureString "$(appVmPassword)" -AsPlainText -Force

        # Create credential object
        $cred = New-Object System.Management.Automation.PSCredential ("$(appVmUser)", $secPassword)

        # Path variables
        $source = "$(Pipeline.Workspace)\drop"
        $destination = "C:\inetpub\wwwroot\MyApp"

        # Deploy via WinRM HTTP
        Invoke-Command -ComputerName $(appVmIp) -Credential $cred -Authentication Default -Port 5985 -ScriptBlock {
            param($src, $dest)
            # Ensure destination folder exists
            if (!(Test-Path $dest)) {
                New-Item -ItemType Directory -Path $dest -Force | Out-Null
            }
            # Copy files
            Copy-Item "$src\*" $dest -Recurse -Force
        } -ArgumentList $source, $destination

      displayName: "Deploy Build to App VM"
